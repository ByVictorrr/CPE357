	if(num_pipes > 0){
		/*allocat n pipes */
		get_pipes(num_pipes, &pipes);

	for(i = 0; i < num_pipes+1; i++){
		printf("prog = %s , i = %d, child = %d\n", progs[i][0], i, child);
		if((child = fork()) < 0){
			perror("bad fork");
			exit(EXIT_FAILURE);
		}else if(child == 0){
			printf("i = %d\n", i);
			/*if the very first process */
			if (i == 0){
			    close(pipes[0][0]);
				dup2(pipes[0][1], STDOUT_FILENO);
			/* general case */
			}
			else{
				/* last program  */
				if(i == num_pipes){
					/*return saved stdout to its process */
					close(pipes[i-1][1]); /*close stdout*/
					dup2(pipes[i-1][0], STDIN_FILENO);/*dup stdin*/
				}else{
					/*Read from last process */
					close(pipes[i-1][1]);
					dup2(pipes[i-1][0], STDIN_FILENO);
					/*Write to the the next process */
					close(pipes[i][0]);
					dup2(pipes[i][1], STDOUT_FILENO);
				}
			}	
			if(execv(progs[i][0], progs[i]) < 0){
				exit(EXIT_FAILURE);
			}	
			exit(0);
		}
		else{
			wait(NULL);
		}
	}/* for loop */
	printf("hi");
}

